// Generated by CoffeeScript 1.6.1
(function() {
  var CoffeeFill, Filter, FilterCollection, Projmate, TaskProcessor, _;

  _ = require("lodash");

  CoffeeFill = require("../common/coffeeFill");

  Filter = require("./filter");

  TaskProcessor = require("./taskProcessor");

  Projmate = {
    FileAsset: require("./fileAsset"),
    Filter: Filter,
    TaskProcessor: TaskProcessor,
    Utils: require("../common/utils"),
    extendsFilter: function(derived) {
      return CoffeeFill["extends"](derived, Filter);
    },
    extendsTaskProcessor: function(derived) {
      return CoffeeFill["extends"](derived, TaskProcessor);
    }
  };

  FilterCollection = (function() {

    function FilterCollection() {
      this.filters = {};
    }

    FilterCollection.prototype.loadPackage = function(packageName) {
      var FilterClass, classFactory, modules, name, that, _results;
      that = this;
      modules = require(packageName);
      _results = [];
      for (name in modules) {
        classFactory = modules[name];
        FilterClass = classFactory(Projmate);
        _results.push((function(name, FilterClass) {
          var filter;
          filter = new FilterClass;
          if (!filter instanceof Filter) {
            throw new Error("Invalid filter " + packageName + "." + name);
          }
          return that.filters[name] = function(processOptions, config) {
            var extnames, instance, newext;
            if (processOptions == null) {
              processOptions = {};
            }
            if (config == null) {
              config = {};
            }
            instance = new FilterClass(name, config, processOptions);
            if (processOptions.$addExtname) {
              newext = processOptions.$addExtname;
              extnames = instance.extname;
              if (!Array.isArray(extnames)) {
                extnames = [extnames];
              }
              if (extnames.indexOf("*") < 0 && extnames.indexOf(newext) < 0) {
                extnames.push(newext);
                instance.extname = extnames;
              }
            }
            return instance;
          };
        })(name, FilterClass));
      }
      return _results;
    };

    return FilterCollection;

  })();

  module.exports = FilterCollection;

}).call(this);
