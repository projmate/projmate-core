// Generated by CoffeeScript 1.6.1
(function() {
  var $, Path, S, async, clone, log, readProjectInput, realUri, strcount, walkdir;

  Path = require("path");

  $ = require("projmate-shell");

  async = require("async");

  log = require("../common/logger").getLogger("pm-create");

  walkdir = require("walkdir");

  S = require("string");

  strcount = function(s, needle) {
    return s.match;
  };

  realUri = function(url) {
    var slashes;
    slashes = (url.match(/\//g) || []).length;
    if (slashes === 1) {
      return "git@github.com/" + url + ".git";
    } else {
      return url;
    }
  };

  clone = function(url, dirname) {
    if (url.indexOf("file://")) {
      url = S(url).chompLeft("file://").s;
      return $.cp_rf(url, dirname);
    } else {
      return $.exec("git clone " + url + " " + dirname);
    }
  };

  readProjectInput = function(dirname, cb) {
    var inputs, json, jsonFile, projectName;
    jsonFile = dirname + "/projmate.json";
    if (!Fs.existsSync(dirname + "/projmate.json")) {
      throw new Error("Invalid project skeleton, `projmate.json` not found");
    }
    projectName = Path.basename(dirname);
    json = Fs.readFileSync(jsonFile);
    json = json.replace(/\{\{dirname}}/g, projectName);
    inputs = JSON.parse(json);
    return async.eachSeries(Object.keys(inputs), function(key, cb) {
      var opts;
      opts = {
        prompt: inputs[key]
      };
      if (key === "project") {
        opts["default"] = projectName;
      }
      return read({
        prompt: prompt
      }, function(err, result) {
        if (err) {
          return cb(err);
        }
        return inputs[key] = result;
      });
    }, function(err) {
      if (err) {
        return cb(err);
      }
      return cb(null, inputs);
    });
  };

  exports.run = function(options) {
    var dirname, url;
    if (options == null) {
      options = {};
    }
    if (!options.url) {
      return log.error("options.url is required");
    }
    url = realUri(options.url);
    dirname = options.project || process.cwd();
    clone(url, dirname);
    return readProjectInput(dirname, function(err, inputs) {
      if (err) {
        return log.error(err);
      }
      return walkdir(dirname, function(path, stat) {
        if (stat.isDirectory()) {
          return console.log("directory: " + path);
        } else {
          return console.log("file: " + path);
        }
      });
    });
  };

}).call(this);
